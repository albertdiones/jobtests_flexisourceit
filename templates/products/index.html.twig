{% extends 'base.html.twig' %}

{% block title %}Hello ProductsController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
    div.message { font-size:12px; font-weight:bold; color:#666; }
    div.message.error { color:red; font-size:10px; }
    label {
        display:block;
        font-size:0.8em;
        color:gray;
    }
    label * {
        font-size:1rem;
    }
    h1, h2, h3 {
        margin-top:2em;
        margin-bottom:0;
    }
</style>

<div class="example-wrapper">
    <h1>Add new proucts</h1>
    {% if error|default(null) %}
        <div class="error">{{ error.message }}</div>
    {% endif %}
    <form>
        <label>Tenant ID: <input name="tenant_id" type="number" value="{{ tenant.id|default("") }}"/></label>
        <div><small>If the tenant id doesn't exist, it will be created</small></div>
        <div><button type="submit">Set Tenant ID</button></div>
    </form>
    {% if allTenants|default(false) %}
    Or select from the existing tenants:
    <form>
        <label>Tenant Name:
        <select name="tenant_id">
            {% for tenant in allTenants %}
                <option value="{{ tenant.id }}">{{ tenant.name }}</option>
            {% endfor %}
        </select>
        </label>
        <div><button type="submit">Set Tenant</button></div>
    </form>
    {% endif %}
    <div>Current Active Tenant: {{ tenant.name|default("None") }}</div>
    {% if newCategoryForm|default(false) %}
        <h2>Create New Category</h2>
        {{ form_start(newCategoryForm, {'attr': {'novalidate': 'novalidate','class':'ajax'}}) }}
            {{ form_widget(newCategoryForm) }}
            <button type="submit">Add New Category</button>
        {{ form_end(newCategoryForm) }}
    {% endif %}
    <h2>Categories/Products</h2>
    <ol>
        {% for categoryName,products in categoryProducts|default([]) %}
            <li>{{ categoryName }} ( {{ products|length }} Products )
                <ul>
                {% for product in products|default([]) %}
                    <li>{{ product.name }}</li>
                {% endfor %}
                </ul>
            </li>
        {% else %}
            <li>No categories/products yet</li>
        {% endfor %}
    </ol>
</div>
<script>
    document.querySelectorAll('form.ajax').forEach( function(el) {
            el.addEventListener(
                'submit',
                function(e) {
                    e.preventDefault();
                    let form = this;
                    appendFormMessage(form,"Loading...","loading");
                    let requestBody = new URLSearchParams();
                    new FormData(form).forEach(function(value, key){
                        requestBody.append(key, value)
                    });
                    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
                    fetch(
                        form.getAttribute('action'),
                        {
                        method: form.getAttribute('method'), // *GET, POST, PUT, DELETE, etc.
                        mode: 'cors', // no-cors, *cors, same-origin
                        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
                        credentials: 'same-origin', // include, *same-origin, omit
                        headers: {
                            'Accept': 'application/json',
                        },
                        redirect: 'error', // manual, *follow, error
                        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                        body: requestBody
                    }).then(response => response.json())
                        .then(
                        function(data) {
                            appendFormMessage(form,data.message, data.message_type ?? 'message');
                            if (data.redirect) {
                                setTimeout( function () { location.href = data.redirect; }, 2000);
                            }
                        }
                    ).catch(function(e) {
                        appendFormMessage(form,e,'error');
                    })
                }
            );
        }
    );
    function  appendFormMessage(form,message,messageType) {
        let messageDiv = form.querySelector('div.message');
        if (!messageDiv) {
            messageDiv = document.createElement('div');
            form.prepend(messageDiv);
        }
        // set the new div as message class, and also clear other classes
        messageDiv.setAttribute('class','message')
        messageDiv.classList.add(messageType);
        messageDiv.innerText = message;
    }
</script>
{% endblock %}
